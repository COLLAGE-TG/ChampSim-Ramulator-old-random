# This file is used to list the file patterns for ignoring the tracking in git
# ignore all files in below directories
/bin/

# ignore the specified type of files (.stats/.statistics/.trace/Dockerfile/.sh)
/*.stats
/*.statistics
/*.trace
/Dockerfile
/*.sh

# Common git commands are listed below, the main branch is the branch pointed by the HEAD pointer.

# (1) Initializing a repository in an existing directory (a subdirectory .git will be created):
# git init

# Cloning a repository from the remote:
# git clone [path]

# Cloning a repository from the remote using a specified name:
# git clone -o [name] [path]

# (2) Beginning to track new files, stage files, mark merge-conflict files as resolved (i.e., add precisely this content to the next commit):
# git add [name]

# (3) Checking the status of your files:
# git status

# (4) Committing your changes:
# git commit

# Staging every tracked files and committing with the commit message 'abc def':
# git commit -a -m 'abc def'

# (5) Removing files from tracking (and your working directory):
# git rm [name]

# (6) Moving files (or renaming files):
# git mv [name_old] [name_new]

# (7) Viewing the commit history:
# git log

# Viewing the commit history from all of the branches:
# git log --all

# (8) Viewing the setting:
# git config --list

# Viewing the setting and where they are coming from:
# git config --list --show-origin

# (9) Unstaging a staged file (undo):
# git restore --staged [name]

# Unmodifying a modified file (undo):
# git restore [name]

# (10) Showing your remotes (parameter -v shows the URLs):
# git remote [-v]

# Inspecting a remote (i.e., showing a remote with more information):
# git remote show [name]

# (11) Adding remote repositories:
# git remote add [name] [path]

# (12) Fetching from a remote (i.e., just downloading and updating the data, no merging or modifying):
# git fetch [name]

# (13) Tracking the remote's branch (i.e., fetching and then merging data into your current branch):
# git pull

# (14) Pushing a local branch to your remote's main branch (i.e., uploading your data):
# git push [remote] [your_branch]

# Adding a local branch to your remote
# git push --set-upstream [remote] [your_branch]

# Pushing a local branch to your remote's branches
# git push [remote] [your_branch]:[remote_branch]

# Deleting a branch in your remote
# git push [remote] --delete [your_branch]

# (15) Renaming and removing remotes:
# git remote rename [name_old] [name_new]
# git remote remove [name]

# (16) Listing your tages:
# git tag

# Creating a lightweight tag:
# git tag v1.0.0

# (17) Creating a new branch:
# git branch [name]

# (18) Switching branches:
# git checkout [name]
# git switch [name]

# Creating and switching to a new branch, based on the main branch:
# git checkout -b [name]
# git switch -c [name]

# Creating and switching to a new branch, based on the remote's branches:
# git checkout -b [name] [remote]/[remote_branch]
# git switch -c [name] [remote]/[remote_branch]

# (19) Deleting a branch:
# git branch -d [name]

# (20) Merging a branch into the merge into branch (e.g., main):
# git switch [merge_into_name]
# git merge [merge_in_name]

# Note you need to commit again after fixing merge conflicts if happened.

# (21) Listing your current branches (parameter -v shows the last commit):
# git branch [-v]

# Filtering the branch list with merged branches
# git branch --merged

# Filtering the branch list with unmerged branches
# git branch --no-merged

# Listing the branch list including the locals and remotes
# git branch --all

# Note using the git fetch command to update the newest data from the remotes



